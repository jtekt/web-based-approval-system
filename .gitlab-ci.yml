stages:
  - build
  - test
  - release
  - deploy

image: moreillon/tdd-dind
services:
  - name: docker:19.03.12-dind

variables:
  APPLICATION_NAME: shinsei-manager
  # Docker
  CONTAINER_IMAGE: ${AWS_ECR_PUBLIC_URL}/${APPLICATION_NAME}
  CONTAINER_IMAGE_TEST: ${CONTAINER_IMAGE}:test
  CONTAINER_IMAGE_LATEST: ${CONTAINER_IMAGE}:latest
  CONTAINER_IMAGE_TAGGED: ${CONTAINER_IMAGE}:${CI_COMMIT_TAG}
  # TDD
  TEST_NETWORK: tdd
  TEST_DB: tdd-db
  TEST_USER_MANAGER: tdd-user-manager

build:
  stage: build
  tags:
    - dind
  only:
    - tags
  before_script:
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ECR_PUBLIC_URL}
    - >
      aws ecr-public create-repository --region us-east-1 --repository-name ${APPLICATION_NAME}
      || echo "Repository might have already existed"
  script:
    - docker build -t ${CONTAINER_IMAGE_TEST} .
    - docker push ${CONTAINER_IMAGE_TEST}

test:
  stage: test
  only:
    - tags
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  tags:
    - dind
  before_script:
    # Registry login
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ECR_PUBLIC_URL}
    # Creating network for TDD
    - docker network create ${TEST_NETWORK}
    - >
      docker run
      -d
      --rm
      --name ${TEST_DB}
      --network ${TEST_NETWORK}
      --hostname ${TEST_DB}
      --env NEO4J_AUTH=none
      neo4j:5.12.0
    - sleep 60 # Wait for Neo4J to become available
    # Deploy a user-manager / authentication system
    - >
      docker run
      -d
      --rm
      --name ${TEST_USER_MANAGER}
      --network ${TEST_NETWORK}
      --hostname ${TEST_USER_MANAGER}
      --env NEO4J_URL=bolt://${TEST_DB}:7687
      --env NEO4J_USERNAME=neo4j
      --env NEO4J_PASSWORD=neo4j
      --env JWT_SECRET=keyboardcat
      moreillon/user-manager:v4.5.3
  script:
    - >
      docker run
      --rm
      --name tdd-app
      --network ${TEST_NETWORK}
      --env NEO4J_URL=bolt://${TEST_DB}:7687
      --env IDENTIFICATION_URL=http://${TEST_USER_MANAGER}/users/self
      --env LOGIN_URL=http://${TEST_USER_MANAGER}/auth/login
      --env TEST_USER_USERNAME=admin
      --env TEST_USER_PASSWORD=admin
      ${CONTAINER_IMAGE_TEST}
      npm run coverage

release:
  stage: release
  only:
    - tags
  tags:
    - dind
  before_script:
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ECR_PUBLIC_URL}
  script:
    - docker pull ${CONTAINER_IMAGE_TEST}
    # Tagging
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_TAGGED}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_LATEST}
    # Pushing
    - docker push ${CONTAINER_IMAGE_TAGGED}
    - docker push ${CONTAINER_IMAGE_LATEST}

deploy:
  stage: deploy
  only:
    - tags
  script:
    - envsubst < kubernetes_manifest.yml | kubectl apply -f -
  environment:
    name: production
    kubernetes:
      namespace: ${KUBERNETES_NAMESPACE}
